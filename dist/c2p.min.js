!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(n=n||self).c2p=t()}(this,(function(){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(t)}
/**
   * callback-promise
   *
   * Convert callback style APIs to Promise based APIs.
   *
   * Usage:
   *      c2p(fs.readFile, 1, 0)(filename)
   *          .then(function (data) { })
   *          .catch(function (error) { })
   *
   *      c2p(chrome.tabs, 'update')(tabId, props)
   *         .then(function (tab) {})
   *         .catch(function (error) {})
   *
   *
   *   @license MIT
   *   @version 0.4.0
   *   @repo    https://github.com/duzun/callback-promise
   *   @author  Dumitru Uzun (DUzun.Me)
   */var t="undefined"!=typeof Promise?Promise:void 0,o={}.hasOwnProperty,e=[],r=e.unshift,i=e.push,u=e.slice;function f(n,o,e,c,p,y){var s,a;return l(n)?(y=p,p=c,c=e,e=o,o=n,n=void 0):l(o)||(o=n[o]),!0===e&&null==p&&(p=e,e=void 0,!0===c&&null==y&&(y=c,c=void 0)),!1===e?s=function(n,t){t(n)}:l(e)?s=function(t,o,r,i){o(e.apply(n||i,t))}:(e=+e||0,s=function(n,t){t(n[e])}),null!=c&&(c=+c||0,a=function(n){var t=n[c];if(null!=t)throw t}),function e(c){var d,m=arguments,v=e.Promise||f.Promise||t,b=n||this,h=new v((function(n,t){var e,f=function(){try{var o=u.call(arguments);a&&a(o),e&&e.apply(this,o),s(o,n,h,b)}catch(n){t(n)}};if(!y){var c=p?0:m.length-1;l(e=m[c])?m[c]=f:e=void 0}e||(p?r:i).call(m,f),d=o.apply(b,m)}));return null!=d&&(h.result=d),h}}function l(n){return"function"==typeof n}return(f.all=function(t,e,r,i,u,c){for(var p in"object"!=n(e)&&(c=u,u=i,i=r,r=e,e={}),t)o.call(t,p)&&l(t[p])&&(e[p]=f(t[p],r,i,u,c));return e},f.Promise=t,f.val=function(n){return function(){return n}},f)}));

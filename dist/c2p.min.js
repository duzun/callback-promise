!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(n=n||self).c2p=t()}(this,(function(){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(t)}
/**
   * callback-promise
   *
   * Convert callback style APIs to Promise based APIs.
   *
   * Usage:
   *      c2p(fs.readFile, 1, 0)(filename)
   *          .then(function (data) { })
   *          .catch(function (error) { })
   *
   *      c2p(chrome.tabs, 'update')(tabId, props)
   *         .then(function (tab) {})
   *         .catch(function (error) {})
   *
   *
   *   @license MIT
   *   @version 0.4.0
   *   @repo    https://github.com/duzun/callback-promise
   *   @author  Dumitru Uzun (DUzun.Me)
   */var t="undefined"!=typeof Promise?Promise:void 0,o={}.hasOwnProperty,e=[],r=e.unshift,i=e.push;function u(n,o,e,l,c,p){var y,s;return f(n)?(p=c,c=l,l=e,e=o,o=n,n=void 0):f(o)||(o=n[o]),!0===e&&null==c&&(c=e,e=void 0,!0===l&&null==p&&(p=l,l=void 0)),!1===e?y=function(n,t){t(n)}:f(e)?y=function(t,o,r,i){o(e.apply(n||i,t))}:(e=+e||0,y=function(n,t){t(n[e])}),null!=l&&(l=+l||0,s=function(n){var t=n[l];if(null!=t)throw t}),function e(l){var a,d=arguments,m=e.Promise||u.Promise||t,v=n||this,b=new m((function(n,t){var e,u=function(){try{var o=arguments;s&&s(o),e&&e.apply(this,o),y(o,n,b,v)}catch(n){t(n)}};if(!p){var l=c?0:d.length-1;f(e=d[l])?d[l]=u:e=void 0}e||(c?r:i).call(d,u),a=o.apply(v,d)}));return null!=a&&(b.result=a),b}}function f(n){return"function"==typeof n}return(u.all=function(t,e,r,i,l,c){for(var p in"object"!=n(e)&&(c=l,l=i,i=r,r=e,e={}),t)o.call(t,p)&&f(t[p])&&(e[p]=u(t[p],r,i,l,c));return e},u.Promise=t,u.val=function(n){return function(){return n}},u)}));
